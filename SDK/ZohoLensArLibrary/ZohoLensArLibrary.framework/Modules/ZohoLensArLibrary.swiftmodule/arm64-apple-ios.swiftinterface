// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 effective-4.1.50 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -Onone -module-name ZohoLensArLibrary
import ARKit
import Foundation
import SceneKit
import Swift
@_exported import ZohoLensArLibrary
public protocol AnnotationSelectionListener : AnyObject {
  func onAnnotationSelected(id: Swift.String)
  func onAnnotationDeselected(id: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ARRenderView : UIKit.UIView {
  @objc dynamic public convenience init()
  public convenience init(arDelegate: ZohoLensArLibrary.ARViewDelegate? = nil)
  @objc public func resumeARSCNViewSession(isSessionStart: Swift.Bool = true, callWithDelay: Swift.Bool = false)
  @objc public func pauseARSCNViewSession()
  public func snapshot() -> UIKit.UIImage
  @objc deinit
}
extension ARRenderView {
  public func drawLine(withId id: Swift.String, withLineColor color: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), atPoint point: CoreGraphics.CGPoint)
  public func placeArrow(withId id: Swift.String = Node.DEFAULT_USER_ID, atPoint originalPoint: CoreGraphics.CGPoint, withArrowColor arrowColor: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), isCustomer: Swift.Bool = false)
  public func setLineWidth(widthInMetre width: Swift.Float)
  public func drawRectangle(withId id: Swift.String, color: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), startPoint: CoreGraphics.CGPoint, endPoint: CoreGraphics.CGPoint)
  public func drawEllipse(withId id: Swift.String, color: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), startPoint: CoreGraphics.CGPoint, endPoint: CoreGraphics.CGPoint)
}
extension ARRenderView {
  public func renderPointCloud(_ flag: Swift.Bool, callback: ((Swift.Bool) -> Swift.Void)? = nil)
  public func isRenderingPointCloud() -> Swift.Bool
  public func renderPlanes(_ flag: Swift.Bool, callback: ((Swift.Bool) -> Swift.Void)? = nil)
  public func isRenderingPlanes() -> Swift.Bool
  public var isHDStreaming: Swift.Bool {
    get
  }
  public func setHighResolution(_ flag: Swift.Bool, callback: ((Swift.Bool) -> Swift.Void)? = nil)
  @available(*, deprecated, renamed: "getCustomerAnchorCount")
  public func getAnchorCount() -> Swift.Int
  public func getCustomerAnchorCount() -> Swift.Int
  public func getTechnicianAnchorCount() -> Swift.Int
  public func getMaxAnchorCount() -> Swift.Int
  @available(*, deprecated, renamed: "removeFirstCustomerAnchor")
  public func removeFirstAnchor(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func removeFirstCustomerAnchor(callback: ((Swift.Int) -> Swift.Void)? = nil)
  @available(*, deprecated, renamed: "removeLastCustomerAnchor")
  public func removeLastAnchor(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func removeLastCustomerAnchor(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func removeLastTechnicianAnchor(callback: ((Swift.Int) -> Swift.Void)? = nil)
  @available(*, deprecated, renamed: "removeAllCustomerAnchors")
  public func removeAllAnchors(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func removeAllCustomerAnchors(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func removeAllTechnicianAnchors(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func removeTechnicianAnchors(annotationIds: [Swift.String])
  public func removeSelectedCustomerAnchor(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func removeSelectedTechnicianAnchor(callback: ((Swift.Int) -> Swift.Void)? = nil)
  public func isAnyCustomerAnchorSelected() -> Swift.Bool
  public func isAnyTechnicianAnchorSelected() -> Swift.Bool
  public func selectTechnicianAnchor(atPoint originalPoint: CoreGraphics.CGPoint) -> Swift.Bool
  public func setCustomerAnchorSelectionListener(custAnnotationListener: ZohoLensArLibrary.AnnotationSelectionListener)
  public func setTechnicianAnchorSelectionListener(techAnnotationListener: ZohoLensArLibrary.AnnotationSelectionListener)
}
extension ARRenderView {
  public class func checkARKitCompatibility() -> Swift.Bool
}
extension ARRenderView : ARKit.ARSessionDelegate, ARKit.ARSCNViewDelegate {
  @objc dynamic public func sessionWasInterrupted(_ session: ARKit.ARSession)
  @objc dynamic public func sessionInterruptionEnded(_ session: ARKit.ARSession)
  @objc dynamic public func session(_ session: ARKit.ARSession, cameraDidChangeTrackingState camera: ARKit.ARCamera)
  @objc dynamic public func session(_ session: ARKit.ARSession, didFailWithError error: Swift.Error)
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @objc dynamic public func session(_ session: ARKit.ARSession, didUpdate frame: ARKit.ARFrame)
}
public protocol ARViewDelegate : AnyObject {
  func didChanged(_ size: CoreGraphics.CGSize)
  func didChange(tracking state: ARKit.ARCamera.TrackingState)
  func onVideoFrameUpdate(frameBuffer: CoreVideo.CVPixelBuffer, rotation: Swift.Int, timestamp: Swift.Int64)
}
public class CustomCircularArray<E> {
  public init(ofSize size: Swift.Int)
  public func setOverwriteCallback(_ callback: ((E, Swift.Int) -> ())?)
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public func clear()
  public func get(index: Swift.Int) -> E?
  public func popLast() -> E?
  public func popFirst() -> E?
  public func push(element: E)
  public func nextIndex() -> Swift.Int
  public func getMaxElementCount() -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LineNode : ZohoLensArLibrary.Node {
  public static var LINE_NODE_NAME: Swift.String
  public func reset()
  public func addPointAndCreateVertices(sceneView: ARKit.ARSCNView, wx: Swift.Float, wy: Swift.Float, wz: Swift.Float, withInvertedTriangle isInvertedTriangle: Swift.Bool = true)
  override public func createOutlineNode() -> SceneKit.SCNNode
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Node : SceneKit.SCNNode {
  public static var DEFAULT_USER_ID: Swift.String
  public func createOutlineNode() -> SceneKit.SCNNode
  @objc override dynamic public init()
  @objc deinit
}
public protocol NodeStateChangeCallback {
  func onNodeDeleteRequested(node: ZohoLensArLibrary.Node)
}
extension UIImage {
  public static func getPlaneTexture() -> UIKit.UIImage?
  public static func getBorderTexture() -> UIKit.UIImage?
  public static func getBorderLineTexture() -> UIKit.UIImage?
  public static func getCancelButtonTexture() -> UIKit.UIImage?
}
