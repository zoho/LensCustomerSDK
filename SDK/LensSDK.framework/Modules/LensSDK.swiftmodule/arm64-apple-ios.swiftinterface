// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name LensSDK
import ARKit
import AVFoundation
import CommonCrypto
import CoreFoundation
import CoreGraphics
import Foundation
@_exported import LensSDK
import Reachability
import SceneKit
import Security
import SnapKit
import Swift
import UIKit
import WebRTC
import _Concurrency
import zlib
public class ResolutionHandler {
  public var videoFrame: CoreGraphics.CGRect!
  public var videoRes: CoreGraphics.CGSize! {
    get
    set
  }
  public var viewRect: CoreGraphics.CGRect
  public init(fromView rect: CoreGraphics.CGRect)
  public func getVideoFrame(for input: LensSDK.DrawingInput) -> CoreGraphics.CGRect
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Participant : LensSDK.BaseParser {
  public enum Role : Swift.String {
    case technician, customer
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String {
    case UP, DOWN
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParticpantOSType : Swift.String {
    case ios, android
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let clientId: Foundation.NSNumber?
  final public let role: LensSDK.Participant.Role?
  final public let email: Swift.String?
  public var status: LensSDK.Participant.Status?
  final public let zuid: Foundation.NSNumber?
  public var name: Swift.String? {
    get
  }
  public var time: Swift.Int?
  public var platformType: LensSDK.Participant.ParticpantOSType?
  final public let app_version: Swift.String?
  public var isNewEnahcementSupported: Swift.Bool {
    get
  }
  public var isSupportNewAnnoation: Swift.Bool {
    get
  }
  public init(selfEmail: Swift.String?, role: LensSDK.Participant.Role, status: LensSDK.Participant.Status?, zuid: Foundation.NSNumber?, display_name: Swift.String?, app_version: Swift.String?, joiningTime: Swift.Int?)
  public static func == (lhs: LensSDK.Participant, rhs: LensSDK.Participant) -> Swift.Bool
  @objc deinit
}
public enum SessionValidationResponse {
  case validTechnician(LensSDK.TechnicianSessionParams)
  case validCustomer(LensSDK.CustomerSessionParams)
  case error(Swift.Error?)
  public enum SessionValidationError : Swift.Error {
    case invalidKey
    case invalidLicence
    case sessionExpired
    case unknowError
    case internalError
    case invalidOrgAcess
    case not_allowed
    case feature_not_available
    case authentication_failed
    case param_missing
    case invalid_encapi_key
    public static func == (a: LensSDK.SessionValidationResponse.SessionValidationError, b: LensSDK.SessionValidationResponse.SessionValidationError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum Edition : Swift.String {
  case FREE, STANDARD, PROFESSIONAL
  public var features: [LensSDK.Features] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Features : Swift.String {
  case INSTANT_CHAT, ANNOTATION_CUSTOMER, USER_MANAGEMENT, ZOOM, ACTION_LOG_VIEWER, SESSION_NOTES, CAPTURE_SCREEN_SHOT, SMS_INVITATION, ANNOTATION_TECHNICIAN, FREEZE_CAMERA_STREAM, DEPARTMENT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AssisLensStates {
  case socketConnected, localPeerHandShakeInitated, localPeerHandShakeDone, remotePeerHandshakeInitated, remotePeerHandshakeDone, connectionCompleted
  case disconnected(Swift.Error?)
  public enum AssistLensDisconnectState : Swift.Error {
    case noInternet, customerEndSession, technicianEndSession, timeout, invalid_client, invalid_key, session_expired, localPeerHandShakeError, remotePeerHandShakeError, serverEndedSession, openedInDifferentLocation
    public static func == (a: LensSDK.AssisLensStates.AssistLensDisconnectState, b: LensSDK.AssisLensStates.AssistLensDisconnectState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var debugDescription: Swift.String {
    get
  }
}
public enum SessionValidation : Swift.String {
  case valid_session, invalid_session, invalid_client, session_expired, duplicate_client
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TechnicianAction : Swift.String {
  case snapshot_taken, video_pause, video_play
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RecodingStatus : Swift.String {
  case ENABLED, STORAGE_FULL, NOT_CONFIGURED, NOT_AVAILABLE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CustomerAction : Swift.String {
  case muteAudio
  case muteVideo
  case unmuteAudio
  case unmuteVideo
  case appResignActive
  case appBecomeActive
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConferenceType : Swift.String {
  case nrs_conferenece, unified_conference
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LensOpreationError : Swift.Error {
  case featureNotExist, messageNotSent, scopeError, dataCorrupted
  public static func == (a: LensSDK.LensOpreationError, b: LensSDK.LensOpreationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ClearAction : Swift.String {
  case clear_ar, clearall_ar, clearall_2d, clearall
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AnnotationSelection : Swift.String {
  case ar_selected, ar_deselected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Node : SceneKit.SCNNode {
  @_Concurrency.MainActor(unsafe) public static let DEFAULT_USER_ID: Swift.String
  @_Concurrency.MainActor(unsafe) public func createOutlineNode() -> SceneKit.SCNNode
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var isIPad: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isHighResIPad: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var isIPhone5: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isMaxOrPlusDevice: Swift.Bool {
    get
  }
  public enum ScreenType : Swift.String {
    case iPhone4_4S
    case iPhones_5_5s_5c_SE
    case iPhones_6_6s_7_8
    case iPhones_6Plus_6sPlus_7Plus_8Plus
    case iPhoneXR
    case iPhoneX_iPhoneXS
    case iPhoneXSMax
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var screenType: UIKit.UIDevice.ScreenType {
    get
  }
}
extension UIKit.UIScreen {
  @_Concurrency.MainActor(unsafe) public var screenSizeBasedOnOrientaion: CoreGraphics.CGSize {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func addChildren(viewController: UIKit.UIViewController, containerView: UIKit.UIView? = nil, isSafeArea: Swift.Bool = false)
}
public class DrawingShapes {
  final public let superShapeLayer: QuartzCore.CAShapeLayer
  weak public var view: UIKit.UIView?
  public init(with view: UIKit.UIView, within rect: CoreGraphics.CGRect)
  public func draw(with drawParm: LensSDK.DrawingInput, lineDashPattern: [Foundation.NSNumber]? = nil)
  public func clearPath(for id: Swift.String)
  public func clearAll()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int)
  convenience public init(rgb: Swift.Int)
}
extension ObjectiveC.NSObject {
  public static func performInMainThread(_ block: @escaping () -> Swift.Void)
  public func performInMainThread(_ block: @escaping () -> Swift.Void)
  public enum AssistImpactFeedbackStyle {
    case medium, high, low, success, warning, error
    public static func == (a: ObjectiveC.NSObject.AssistImpactFeedbackStyle, b: ObjectiveC.NSObject.AssistImpactFeedbackStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func makeTapTick(_ style: ObjectiveC.NSObject.AssistImpactFeedbackStyle)
  public static func makeTapTick(_ style: ObjectiveC.NSObject.AssistImpactFeedbackStyle)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func adjustTableViewHeaderFrameIfNeeded()
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func scrollToLastIndexPath()
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public var isTableEmpty: Swift.Bool {
    get
  }
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func addNoDataView(noDataView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func removenoDataView()
}
extension Swift.Int {
  public var cgfloat: CoreGraphics.CGFloat {
    get
  }
}
public protocol CommonIntUtility {
  var isNegative: Swift.Bool { get }
  var isZero: Swift.Bool { get }
  var string: Swift.String { get }
}
extension LensSDK.CommonIntUtility where Self : Swift.SignedInteger {
  public var string: Swift.String {
    get
  }
  public func string(maximumNumber: Swift.Int) -> Swift.String
  public var isNegative: Swift.Bool {
    get
  }
  public var isZero: Swift.Bool {
    get
  }
  public var convertFileSizeWithUnit: Swift.String {
    get
  }
}
extension Swift.Int : LensSDK.CommonIntUtility {
}
extension Swift.Int32 : LensSDK.CommonIntUtility {
}
extension Swift.Int64 : LensSDK.CommonIntUtility {
}
extension Swift.Int16 : LensSDK.CommonIntUtility {
}
extension UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) public var frame: CoreGraphics.CGRect {
    get
  }
}
public class SocketHandler {
  public var delegate: LensSDK.AssistSocketProtocol?
  public var timeOut: Swift.Double
  public var reachability: Reachability.Reachability?
  public var gateWayUrlRequest: Foundation.URLRequest!
  public init(_ url: Foundation.URLRequest, delegate: LensSDK.AssistSocketProtocol?)
  public var disableSSLCertValidation: Swift.Bool {
    get
    set
  }
  public var isConnected: Swift.Bool {
    get
  }
  public func start()
  public func reset()
  public func write(_ string: Swift.String?)
  public func write(_ data: Foundation.Data?)
  public func disconnect()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Chat : LensSDK.BaseParser {
  public var clientID: Foundation.NSNumber?
  final public let message: Swift.String?
  public var participant: LensSDK.Participant?
  final public let date: Foundation.Date
  public init(with chatMsg: Swift.String?)
  @objc deinit
}
public typealias Email = Swift.String
public protocol AnnotationSelectionListener : AnyObject {
  func onAnnotationSelected(id: Swift.String)
  func onAnnotationDeselected(id: Swift.String)
}
public class CustomCircularArray<E> {
  public init(ofSize size: Swift.Int)
  public func setOverwriteCallback(_ callback: ((E, Swift.Int) -> ())?)
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public func clear()
  public func get(index: Swift.Int) -> E?
  public func popLast() -> E?
  public func popFirst() -> E?
  public func push(element: E)
  public func nextIndex() -> Swift.Int
  public func getMaxElementCount() -> Swift.Int
  @objc deinit
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public var prefersLargeTitles: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func makeTransparantNavigationBar(_ flag: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func makeColorNavigationBar(color: UIKit.UIColor, hideShadowImage: Swift.Bool = true)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LineNode : LensSDK.Node {
  @_Concurrency.MainActor(unsafe) public static let LINE_NODE_NAME: Swift.String
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func addPointAndCreateVertices(sceneView: ARKit.ARSCNView, wx: Swift.Float, wy: Swift.Float, wz: Swift.Float, withInvertedTriangle isInvertedTriangle: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) override public func createOutlineNode() -> SceneKit.SCNNode
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Lens {
  public var lensSignallingDelegate: LensSDK.LensSignallingProtocol? {
    get
    set
  }
  weak public var chatDelegate: LensSDK.ChatProtocol?
  public var participant: [LensSDK.Participant] {
    get
  }
  public var sessionKey: Swift.String {
    get
  }
  public var clientID: Swift.String? {
    get
  }
  public var displayName: Swift.String? {
    get
  }
  public var customerObject: LensSDK.Participant? {
    get
  }
  public var creatorZUID: Foundation.NSNumber? {
    get
  }
  public var technicianObjects: [LensSDK.Participant] {
    get
  }
  public var conferanceType: LensSDK.ConferenceType? {
    get
  }
  public var selfEmail: Swift.String {
    get
  }
  public var selfName: Swift.String {
    get
  }
  public var edition: LensSDK.Edition? {
    get
  }
  public var connectionParam: LensSDK.CommonConnectionParams {
    get
  }
  @objc deinit
}
extension LensSDK.Lens {
  @discardableResult
  public func send(_ chat: LensSDK.Chat) -> Swift.Bool
}
public protocol ARViewDelegate : AnyObject {
  func didChanged(_ size: CoreGraphics.CGSize)
  func didChange(tracking state: ARKit.ARCamera.TrackingState)
  func onVideoFrameUpdate(frameBuffer: CoreVideo.CVPixelBuffer, rotation: Swift.Int, timestamp: Swift.Int64)
}
extension Foundation.FileManager {
  public static var documentDirURL: Foundation.URL? {
    get
  }
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var leftPading: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeHolderColor: UIKit.UIColor {
    get
    set
  }
}
extension Swift.Bool {
  public var rawValue: Swift.String {
    get
  }
}
extension CoreGraphics.CGFloat {
  public var quarter: CoreGraphics.CGFloat {
    get
  }
  public var half: CoreGraphics.CGFloat {
    get
  }
  public var Threequarter: CoreGraphics.CGFloat {
    get
  }
}
extension CoreGraphics.CGFloat {
  public func rounded(toPlaces places: Swift.Int) -> CoreGraphics.CGFloat
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public func didScrollToEnd() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func tryingToViewMore(_ range: CoreGraphics.CGFloat = 50) -> Swift.Bool
}
extension UIKit.UIScrollView {
  public enum ATViewSide {
    case left, right, bottom, top
    public static func == (a: UIKit.UIScrollView.ATViewSide, b: UIKit.UIScrollView.ATViewSide) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public func contentSize(withSafeArea side: UIKit.UIScrollView.ATViewSide) -> CoreGraphics.CGSize
}
public typealias JSON = [Swift.String : Any]
public typealias JSONKey = Swift.String
public struct JsonParser {
  public var json: LensSDK.JSON
  public init?(json: LensSDK.JSON?)
  public subscript<DataType>(key: LensSDK.JSONKey) -> DataType? {
    get
  }
  public func jsonParser(forKey key: LensSDK.JSONKey) -> LensSDK.JsonParser?
  public func jsonParsers(forKey key: LensSDK.JSONKey) -> [LensSDK.JsonParser]?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseParser : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol AssistSocketProtocol {
  func didSocketConnected()
  func didSocketDisconnected(_ error: Swift.Error?)
  func didReceive(_ data: Foundation.Data)
  func didReceive(_ string: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ARRenderView : UIKit.UIView {
  @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) convenience public init(arDelegate: LensSDK.ARViewDelegate? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func resumeARSCNViewSession(isSessionStart: Swift.Bool = true, callWithDelay: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) public func pauseARSCNViewSession()
  @_Concurrency.MainActor(unsafe) public func snapshot() -> UIKit.UIImage
  @objc deinit
}
extension LensSDK.ARRenderView {
  @_Concurrency.MainActor(unsafe) public func drawLine(withId id: Swift.String, withLineColor color: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), atPoint point: CoreGraphics.CGPoint)
  @_Concurrency.MainActor(unsafe) public func placeArrow(withId id: Swift.String = Node.DEFAULT_USER_ID, atPoint originalPoint: CoreGraphics.CGPoint, withArrowColor arrowColor: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), isCustomer: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func setLineWidth(widthInMetre width: Swift.Float)
  @_Concurrency.MainActor(unsafe) public func drawRectangle(withId id: Swift.String, color: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), startPoint: CoreGraphics.CGPoint, endPoint: CoreGraphics.CGPoint)
  @_Concurrency.MainActor(unsafe) public func drawEllipse(withId id: Swift.String, color: UIKit.UIColor = UIColor(red: 0.129, green: 0.639, blue: 0.356, alpha: 1), startPoint: CoreGraphics.CGPoint, endPoint: CoreGraphics.CGPoint)
}
extension LensSDK.ARRenderView {
  @_Concurrency.MainActor(unsafe) public func renderPointCloud(_ flag: Swift.Bool, callback: ((_ flag: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func isRenderingPointCloud() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func renderPlanes(_ flag: Swift.Bool, callback: ((_ flag: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func isRenderingPlanes() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHDStreaming: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func setHighResolution(_ flag: Swift.Bool, callback: ((_ flag: Swift.Bool) -> Swift.Void)? = nil)
  @available(*, deprecated, renamed: "getCustomerAnchorCount")
  @_Concurrency.MainActor(unsafe) public func getAnchorCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func getCustomerAnchorCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func getTechnicianAnchorCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func getMaxAnchorCount() -> Swift.Int
  @available(*, deprecated, renamed: "removeFirstCustomerAnchor")
  @_Concurrency.MainActor(unsafe) public func removeFirstAnchor(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeFirstCustomerAnchor(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @available(*, deprecated, renamed: "removeLastCustomerAnchor")
  @_Concurrency.MainActor(unsafe) public func removeLastAnchor(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeLastCustomerAnchor(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeLastTechnicianAnchor(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @available(*, deprecated, renamed: "removeAllCustomerAnchors")
  @_Concurrency.MainActor(unsafe) public func removeAllAnchors(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeAllCustomerAnchors(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeAllTechnicianAnchors(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeTechnicianAnchors(annotationIds: [Swift.String])
  @_Concurrency.MainActor(unsafe) public func removeSelectedCustomerAnchor(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeSelectedTechnicianAnchor(callback: ((_ remainingAnchorCount: Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func isAnyCustomerAnchorSelected() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isAnyTechnicianAnchorSelected() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func selectTechnicianAnchor(atPoint originalPoint: CoreGraphics.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func setCustomerAnchorSelectionListener(custAnnotationListener: LensSDK.AnnotationSelectionListener)
  @_Concurrency.MainActor(unsafe) public func setTechnicianAnchorSelectionListener(techAnnotationListener: LensSDK.AnnotationSelectionListener)
}
extension LensSDK.ARRenderView {
  @_Concurrency.MainActor(unsafe) public class func checkARKitCompatibility() -> Swift.Bool
}
extension LensSDK.ARRenderView : ARKit.ARSessionDelegate, ARKit.ARSCNViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionWasInterrupted(_ session: ARKit.ARSession)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionInterruptionEnded(_ session: ARKit.ARSession)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, cameraDidChangeTrackingState camera: ARKit.ARCamera)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, didFailWithError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderer(_ renderer: SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, didUpdate frame: ARKit.ARFrame)
}
extension UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) public var at_searchTextField: UIKit.UITextField? {
    get
  }
}
extension UIKit.UIImage {
  public static func getPlaneTexture() -> UIKit.UIImage?
  public static func getBorderTexture() -> UIKit.UIImage?
  public static func getBorderLineTexture() -> UIKit.UIImage?
  public static func getCancelButtonTexture() -> UIKit.UIImage?
}
public struct RoomCredential {
}
public struct TalkSettings {
}
public class File : Swift.Equatable {
  public static func == (lhs: LensSDK.File, rhs: LensSDK.File) -> Swift.Bool
  final public let totalSize: Swift.Int
  final public let fileName: Swift.String
  final public let fileID: Swift.String
  public init(fileId id: Swift.String, fileName: Swift.String, fileSize: Swift.Int)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class FreezeImageParser : LensSDK.BaseParser {
  final public let imageString: Swift.String?
  final public let total_chunks: Foundation.NSNumber?
  final public let total_image_size: Foundation.NSNumber?
  final public let img_id: Foundation.NSNumber?
  final public let chunk_no: Foundation.NSNumber?
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AudioSessionHandler : ObjectiveC.NSObject {
  weak public var delegate: LensSDK.AudioSessionProtocol?
  convenience public init(with delegate: LensSDK.AudioSessionProtocol)
  public func set(_ port: AVFAudio.AVAudioSession.PortOverride, completion: @escaping (Swift.Bool) -> ())
  @objc deinit
}
extension LensSDK.AudioSessionHandler : WebRTC.RTCAudioSessionDelegate {
  @objc dynamic public func audioSessionDidChangeRoute(_ session: WebRTC.RTCAudioSession, reason: AVFAudio.AVAudioSession.RouteChangeReason, previousRoute: AVFAudio.AVAudioSessionRouteDescription)
}
extension Foundation.Date {
  public static func today() -> Foundation.Date
  public func next(_ weekday: Foundation.Date.Weekday, considerToday: Swift.Bool = false) -> Foundation.Date
  public func previous(_ weekday: Foundation.Date.Weekday, considerToday: Swift.Bool = false) -> Foundation.Date
  public func get(_ direction: Foundation.Date.SearchDirection, _ weekDay: Foundation.Date.Weekday, considerToday consider: Swift.Bool = false) -> Foundation.Date
}
extension Foundation.Date {
  public func getWeekDaysInEnglish() -> [Swift.String]
  public enum Weekday : Swift.String {
    case monday, tuesday, wednesday, thursday, friday, saturday, sunday
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SearchDirection {
    case Next
    case Previous
    public static func == (a: Foundation.Date.SearchDirection, b: Foundation.Date.SearchDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Foundation.Date {
  public static func string(for date: Foundation.Date, format: Swift.String? = nil) -> Swift.String
  public func string(format: Swift.String? = nil) -> Swift.String
  public static func date(for string: Swift.String, format: Swift.String) -> Foundation.Date?
}
extension Foundation.Date {
  public func getString(mode: UIKit.UIDatePicker.Mode = .date, timeZone: Foundation.TimeZone = TimeZone.current) -> Swift.String
  public func getString(format: Swift.String) -> Swift.String
  public func at_getLocalizedString(_ mode: UIKit.UIDatePicker.Mode = .date) -> Swift.String
}
extension Foundation.Date {
  public var millisecondsSince1970: Swift.Int {
    get
  }
  public var randomID: Swift.String {
    get
  }
}
extension Foundation.Date {
  public func isSmallerThanGivenDateByDay(_ date: Foundation.Date) -> Swift.Bool
  public func isEqualDay(_ date: Foundation.Date) -> Swift.Bool
  public func isSmallerThanByMinutes(_ date: Foundation.Date) -> Swift.Bool
}
extension Foundation.Data {
  public func write(fileName: Swift.String, appendIntermediateDir path: Swift.String? = nil) throws -> Foundation.URL?
  public var mbSize: CoreGraphics.CGFloat {
    get
  }
  public var sizeWithUnit: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class FileUploader : LensSDK.File {
  public var chunkSize: Swift.Int
  public var isUploadCompleted: Swift.Bool {
    get
  }
  @objc deinit
}
public protocol OtherActionProtocol : AnyObject {
  func onTechnicianPerform(action: LensSDK.TechnicianAction)
  var isCustomerMuteVideo: Swift.Bool { get }
}
public protocol AnnotaionDelegate : AnyObject {
  func onFreezeSuccess()
  func onFreezeFailure()
  func onUnfreezeImage()
  func didReceiveAnnotation(input: LensSDK.DrawingInput?, isClear: Swift.Bool)
  @available(iOS 11.0, *)
  func didChangeInAR(tracking status: ARKit.ARCamera.TrackingState)
}
extension Swift.Array {
  public mutating func removeElements(_ filter: (Element) -> Swift.Bool)
}
extension Swift.Array where Element : Swift.Equatable {
  public func contains(_ element: Element) -> Swift.Bool
  public func index(of element: Element) -> Swift.Int?
  public mutating func remove(element: Element)
}
extension Foundation.Data {
  public var utf8String: Swift.String? {
    get
  }
  public var asciiString: Swift.String? {
    get
  }
  public var isoLatin1: Swift.String? {
    get
  }
  public var jsonData: LensSDK.JSON? {
    get
  }
}
extension Swift.Dictionary {
  public var jsonData: Foundation.Data? {
    get
  }
}
extension LensSDK.CommonConnectionParams {
  public func getWSSURL(clientID: Swift.String?, participant name: Swift.String) -> Foundation.URL
}
public protocol AudioSessionProtocol : AnyObject {
  func didChangeRoute(_ audioDescription: AVFAudio.AVAudioSessionRouteDescription, reason: AVFAudio.AVAudioSession.RouteChangeReason)
}
public protocol LensSignallingProtocol : AnyObject {
  func renderingView(_ view: UIKit.UIView?)
  func didChangeLensConnectionState(state: LensSDK.AssisLensStates)
  func didChange(_ participant: LensSDK.Participant)
  func onSessionValidationDone()
  func onTechnicianPerform(draw shape: LensSDK.DrawingInput.DrawShape)
  func conference(type: LensSDK.ConferenceType)
}
public protocol ChatProtocol : AnyObject {
  func didReceive(_ chat: LensSDK.Chat)
}
public protocol CommonConnectionParams {
  var key: Swift.String { get }
  var signaling_server: Swift.String { get }
  var is_ssl_supported: Swift.Bool { get }
  var gateway_port: Swift.Int { get }
  var grid: Swift.String? { get }
}
public protocol CustomerSessionParams : LensSDK.CommonConnectionParams {
}
public protocol TechnicianSessionParams : LensSDK.CommonConnectionParams {
  var authkey: Swift.String? { get }
  var secondaryTechJoinURL: Foundation.URL? { get }
  var customerJoinURL: Foundation.URL? { get }
  var zuid: Swift.Int? { get }
  var isSessionHost: Swift.Bool { get }
  var creator_zuid: Swift.String? { get }
  var authtype: Swift.Int? { get }
}
public struct DrawingInput {
  public enum DrawShape : Swift.String {
    case ellipse, pencil, rectangle, arrow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var id: Swift.String
  public var annotationType: LensSDK.DrawingInput.DrawShape
  public var storkeColor: UIKit.UIColor
  public var start: CoreGraphics.CGPoint!
  public var end: CoreGraphics.CGPoint!
  public var fillColor: UIKit.UIColor
  public enum FreeStyleState {
    case start, move, end
    public static func == (a: LensSDK.DrawingInput.FreeStyleState, b: LensSDK.DrawingInput.FreeStyleState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var freeStyleState: LensSDK.DrawingInput.FreeStyleState?
  public var size: CoreGraphics.CGSize {
    get
  }
  public var frame: CoreGraphics.CGRect {
    get
    set
  }
  public var line_width: CoreGraphics.CGFloat
}
@_hasMissingDesignatedInitializers public class LensCustomer : LensSDK.Lens {
  weak public var annotationDelegate: LensSDK.AnnotaionDelegate?
  weak public var otherActionDelegate: LensSDK.OtherActionProtocol?
  public var talkRenderView: UIKit.UIView? {
    get
  }
  public var arRenderView: LensSDK.ARRenderView? {
    get
  }
  public var videoResolution: CoreGraphics.CGSize?
  public init(connectionParam: LensSDK.CustomerSessionParams, name: Swift.String, email: Swift.String)
  public func startSession(inArMode arMode: Swift.Bool = false)
  public static func validateSession(sessionKey key: Swift.String, token: Swift.String, base: Foundation.URL, completion: @escaping (LensSDK.SessionValidationResponse) -> Swift.Void)
  @objc deinit
}
extension LensSDK.LensCustomer {
  @discardableResult
  public func muteAudio() -> Swift.Bool
  @discardableResult
  public func unmuteAudio() -> Swift.Bool
  @discardableResult
  public func muteVideo() -> Swift.Bool
  @discardableResult
  public func unmuteVideo() -> Swift.Bool
  public func closeRoom()
}
public enum AssistSocketErrorState : Swift.Error {
  case nointernet, writeTimeoutError, invalidSSLError, compressionError, outputStreamWriteError, protocolError, upgradeError, closeError, connectionTimeOut
  public static func == (a: LensSDK.AssistSocketErrorState, b: LensSDK.AssistSocketErrorState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIPopoverArrowDirection {
  public func defaultSourceRect(from view: UIKit.UIView) -> CoreGraphics.CGRect?
  public var isVerticalDirection: Swift.Bool {
    get
  }
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func openShareSheet(_ data: [Any], popFromView view: UIKit.UIView, completionHandler completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func prepareAsPopoverController(from view: UIKit.UIView, soruceRect: CoreGraphics.CGRect?, preferedSize contentSize: CoreGraphics.CGSize = .zero, permittedArrowDirections directions: UIKit.UIPopoverArrowDirection = .down)
  @_Concurrency.MainActor(unsafe) public func prepareAsPopoverController(from barButton: UIKit.UIBarButtonItem, soruceRect: CoreGraphics.CGRect?, preferedSize contentSize: CoreGraphics.CGSize = .zero, permittedArrowDirections directions: UIKit.UIPopoverArrowDirection = .down)
  @_Concurrency.MainActor(unsafe) public func dismissPopoverIfExist()
}
extension UIKit.UIViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func popoverPresentationController(_ popoverPresentationController: UIKit.UIPopoverPresentationController, willRepositionPopoverTo rect: Swift.UnsafeMutablePointer<CoreGraphics.CGRect>, in view: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIView>)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func prepareForPopoverPresentation(_ popoverPresentationController: UIKit.UIPopoverPresentationController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func popoverPresentationControllerDidDismissPopover(_ popoverPresentationController: UIKit.UIPopoverPresentationController)
}
extension Foundation.TimeZone {
  public func hoursFromGMT() -> Swift.String
  public func hoursFromGMTWithSign() -> Swift.String
}
postfix operator |-|
postfix operator |=|
infix operator |-| : DefaultPrecedence
infix operator |=| : DefaultPrecedence
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) postfix public static func |-| (argument: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public static func |-| (lhs: UIKit.UIView, rhs: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public static func |-| (lhs: UIKit.UIView, padding: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) postfix public static func |=| (argument: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public static func |=| (lhs: UIKit.UIView, rhs: UIKit.UIView)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func makeCornerRadius(with value: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public func makeBlendEdge(withPoint: CoreGraphics.CGFloat = 06)
  @_Concurrency.MainActor(unsafe) public func isBlendEdgeView(withPoint: CoreGraphics.CGFloat = 06) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isCircle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isBlendEdge: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func layoutIfNeededWithAnimation()
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var safeAreaInsets_Below11Also: UIKit.UIEdgeInsets {
    get
  }
}
extension UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var atCornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var atBorderColor: UIKit.UIColor? {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var borderWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var shadowRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var shadowOpacity: Swift.Float {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var shadowOffset: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
}
extension UIKit.UIButton {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var disabledTitle: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var disabledTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var paddingX: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var paddingY: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func setDefaultTitle(_ title: Swift.String, controlState states: [UIKit.UIControl.State] = [.normal, .highlighted])
  @_Concurrency.MainActor(unsafe) public func setDefaultAttributtedTitle(_ title: Foundation.NSAttributedString, controlState states: [UIKit.UIControl.State] = [.normal, .highlighted])
}
extension Swift.String {
  public var isEmailID: Swift.Bool {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public var floatValue: CoreGraphics.CGFloat {
    get
  }
  public func subString(fromIndex: Swift.Int) -> Swift.String
  public func subString(toIndex: Swift.Int) -> Swift.String
  public static func < (lhs: Swift.String, rhs: Swift.Int) -> Swift.String
  public func copyInClipboard()
  public var utf8Data: Foundation.Data? {
    get
  }
  public var isoLatin1Data: Foundation.Data? {
    get
  }
  public var asciiData: Foundation.Data? {
    get
  }
  public func data(encode: Swift.String.Encoding) -> Foundation.Data?
  public var splitByNewLine: [Swift.String] {
    get
  }
  public var splitBySpace: [Swift.String] {
    get
  }
}
public protocol NodeStateChangeCallback {
  func onNodeDeleteRequested(node: LensSDK.Node)
}
extension LensSDK.Participant.Role : Swift.Equatable {}
extension LensSDK.Participant.Role : Swift.Hashable {}
extension LensSDK.Participant.Role : Swift.RawRepresentable {}
extension LensSDK.Participant.Status : Swift.Equatable {}
extension LensSDK.Participant.Status : Swift.Hashable {}
extension LensSDK.Participant.Status : Swift.RawRepresentable {}
extension LensSDK.Participant.ParticpantOSType : Swift.Equatable {}
extension LensSDK.Participant.ParticpantOSType : Swift.Hashable {}
extension LensSDK.Participant.ParticpantOSType : Swift.RawRepresentable {}
extension LensSDK.SessionValidationResponse.SessionValidationError : Swift.Equatable {}
extension LensSDK.SessionValidationResponse.SessionValidationError : Swift.Hashable {}
extension LensSDK.Edition : Swift.Equatable {}
extension LensSDK.Edition : Swift.Hashable {}
extension LensSDK.Edition : Swift.RawRepresentable {}
extension LensSDK.Features : Swift.Equatable {}
extension LensSDK.Features : Swift.Hashable {}
extension LensSDK.Features : Swift.RawRepresentable {}
extension LensSDK.AssisLensStates.AssistLensDisconnectState : Swift.Equatable {}
extension LensSDK.AssisLensStates.AssistLensDisconnectState : Swift.Hashable {}
extension LensSDK.SessionValidation : Swift.Equatable {}
extension LensSDK.SessionValidation : Swift.Hashable {}
extension LensSDK.SessionValidation : Swift.RawRepresentable {}
extension LensSDK.TechnicianAction : Swift.Equatable {}
extension LensSDK.TechnicianAction : Swift.Hashable {}
extension LensSDK.TechnicianAction : Swift.RawRepresentable {}
extension LensSDK.RecodingStatus : Swift.Equatable {}
extension LensSDK.RecodingStatus : Swift.Hashable {}
extension LensSDK.RecodingStatus : Swift.RawRepresentable {}
extension LensSDK.CustomerAction : Swift.Equatable {}
extension LensSDK.CustomerAction : Swift.Hashable {}
extension LensSDK.CustomerAction : Swift.RawRepresentable {}
extension LensSDK.ConferenceType : Swift.Equatable {}
extension LensSDK.ConferenceType : Swift.Hashable {}
extension LensSDK.ConferenceType : Swift.RawRepresentable {}
extension LensSDK.LensOpreationError : Swift.Equatable {}
extension LensSDK.LensOpreationError : Swift.Hashable {}
extension LensSDK.ClearAction : Swift.Equatable {}
extension LensSDK.ClearAction : Swift.Hashable {}
extension LensSDK.ClearAction : Swift.RawRepresentable {}
extension LensSDK.AnnotationSelection : Swift.Equatable {}
extension LensSDK.AnnotationSelection : Swift.Hashable {}
extension LensSDK.AnnotationSelection : Swift.RawRepresentable {}
extension UIKit.UIDevice.ScreenType : Swift.Equatable {}
extension UIKit.UIDevice.ScreenType : Swift.Hashable {}
extension UIKit.UIDevice.ScreenType : Swift.RawRepresentable {}
extension ObjectiveC.NSObject.AssistImpactFeedbackStyle : Swift.Equatable {}
extension ObjectiveC.NSObject.AssistImpactFeedbackStyle : Swift.Hashable {}
extension UIKit.UIScrollView.ATViewSide : Swift.Equatable {}
extension UIKit.UIScrollView.ATViewSide : Swift.Hashable {}
extension Foundation.Date.Weekday : Swift.Equatable {}
extension Foundation.Date.Weekday : Swift.Hashable {}
extension Foundation.Date.Weekday : Swift.RawRepresentable {}
extension Foundation.Date.SearchDirection : Swift.Equatable {}
extension Foundation.Date.SearchDirection : Swift.Hashable {}
extension LensSDK.DrawingInput.DrawShape : Swift.Equatable {}
extension LensSDK.DrawingInput.DrawShape : Swift.Hashable {}
extension LensSDK.DrawingInput.DrawShape : Swift.RawRepresentable {}
extension LensSDK.DrawingInput.FreeStyleState : Swift.Equatable {}
extension LensSDK.DrawingInput.FreeStyleState : Swift.Hashable {}
extension LensSDK.AssistSocketErrorState : Swift.Equatable {}
extension LensSDK.AssistSocketErrorState : Swift.Hashable {}
