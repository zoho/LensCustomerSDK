#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef LENSCUSTOMERSDK_SWIFT_H
#define LENSCUSTOMERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ARKit;
@import AVFAudio;
@import CoreFoundation;
@import CoreMedia;
@import CoreVideo;
@import Foundation;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import SceneKit;
@import UIKit;
@import WebKit;
@import WebRTC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LensCustomerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Allows specifying the final video orientation.
typedef SWIFT_ENUM(NSInteger, ARFrameMode, open) {
  ARFrameModeAuto = 0,
  ARFrameModeAspectFit = 1,
/// Recommended for iPhone X
  ARFrameModeAspectFill = 2,
};

/// Allows specifying the accepted orientaions in a <code>UIViewController</code> with AR scenes.
typedef SWIFT_ENUM(NSInteger, ARInputViewOrientation, open) {
/// Enables the portrait input views orientation.
  ARInputViewOrientationPortrait = 1,
/// Enables the landscape left input views orientation.
  ARInputViewOrientationLandscapeLeft = 3,
/// Enables the landscape right input views orientation.
  ARInputViewOrientationLandscapeRight = 4,
};

@protocol RecordARDelegate;
@protocol RenderARDelegate;
enum RecordARStatus : NSInteger;
enum RecordARMicrophoneStatus : NSInteger;
enum RecordARMicrophonePermission : NSInteger;
enum ARVideoOrientation : NSInteger;
@class ARSCNView;
@class NSURL;
@class PHAsset;

/// This class renders the <code>ARSCNView</code> content with the device’s camera stream to generate a video 📹
SWIFT_CLASS("_TtC15LensCustomerSDK10ARRecorder") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface ARRecorder : NSObject
/// An object that passes the AR recorder errors and status in the protocol methods.
@property (nonatomic, strong) id <RecordARDelegate> _Nullable delegate;
/// An object that passes the AR rendered content in the protocol method.
@property (nonatomic, strong) id <RenderARDelegate> _Nullable renderAR;
/// An object that returns the AR recorder current status.
@property (nonatomic, readonly) enum RecordARStatus status;
/// An object that returns the current Microphone status.
@property (nonatomic, readonly) enum RecordARMicrophoneStatus micStatus;
/// An object that allow customizing when to ask for Microphone permission, if needed. Default is <code>.manual</code>.
@property (nonatomic) enum RecordARMicrophonePermission requestMicPermission;
/// An object that allow customizing the video orientation. Default is <code>.auto</code>.
@property (nonatomic) enum ARVideoOrientation videoOrientation;
/// An object that allow customizing the AR content mode. Default is <code>.auto</code>.
@property (nonatomic) enum ARFrameMode contentMode;
/// A boolean that enables or disables AR content rendering before recording for image & video processing. Default is <code>true</code>.
@property (nonatomic) BOOL onlyRenderWhileRecording;
/// A boolean that enables or disables audio recording. Default is <code>true</code>.
@property (nonatomic) BOOL enableAudio;
/// A boolean that enables or disables audio <code>mixWithOthers</code> if audio recording is enabled. This allows playing music and recording audio at the same time. Default is <code>true</code>.
@property (nonatomic) BOOL enableMixWithOthers;
/// A boolean that enables or disables adjusting captured media for sharing online. Default is <code>true</code>.
@property (nonatomic) BOOL adjustVideoForSharing;
/// A boolean that enables or disables clearing cached media after exporting to Camera Roll. Default is <code>true</code>.
@property (nonatomic) BOOL deleteCacheWhenExported;
/// A boolean that enables or disables using envronment light rendering. Default is <code>false</code>.
@property (nonatomic) BOOL enableAdjustEnvironmentLighting;
/// A boolean that indicates whether render engine should retain SCNTechnique used in the view. Default is <code>false</code>.
@property (nonatomic) BOOL retainTechnique;
/// Initialize 🌞🍳 <code>ARRecorder</code> with an <code>ARSCNView</code> 🚀.
- (nonnull instancetype)initWithARSceneKit:(ARSCNView * _Nonnull)ARSceneKit OBJC_DESIGNATED_INITIALIZER;
/// A method that starts or resumes ⏯ recording a video 📹.
- (void)recordAt:(NSURL * _Nullable)url;
/// A method that starts recording a video 📹 with a specified duration ⏳ in seconds.
/// In order to stop the recording before the specified duration, simply call <code>stop()</code> or <code>stopAndExport()</code> methods.
/// warning:
/// You CAN NOT <code>pause()</code> video recording when a duration is specified.
/// \param duration A <code>TimeInterval</code> object that can be set to the duration specified in seconds.
///
/// \param finished A block that will be called when the specified <code>duration</code> has ended.
/// The block returns the following parameter:
/// <code>videoPath</code>
/// A <code>URL</code> object that contains the local file path of the video to allow manual exporting or preview of the video.
///
- (void)recordAt:(NSURL * _Nullable)url forDuration:(NSTimeInterval)duration :(void (^ _Nullable)(NSURL * _Nonnull))finished;
/// A method that pauses recording a video ⏸📹.
/// In order to resume recording, simply call the <code>record()</code> method.
- (void)pause;
/// A method that stops ⏹ recording a video 📹 and exports it to the Photo Library 📲💾.
/// \param finished A block that will be called when the export process is complete.
/// The block returns the following parameters:
/// <code>videoPath</code>
/// A <code>URL</code> object that contains the local file path of the video to allow manual exporting or preview of the video.
/// <code>permissionStatus</code>
/// A <code>PHAuthorizationStatus</code> object that returns the current application’s status for exporting media to the Photo Library.
/// <code>exported</code>
/// A boolean that returns <code>true</code> when a video is successfully exported to the Photo Library. Otherwise, it returns <code>false</code>.
///
- (void)stopAndExport:(void (^ _Nullable)(PHAsset * _Nullable, NSURL * _Nullable, PHAuthorizationStatus, BOOL))finished;
/// A method that stops ⏹ recording a video 📹 and returns the video path in the completion handler.
/// \param finished A block that will be called when the specified <code>duration</code> has ended.
/// The block returns the following parameter:
/// <code>videoPath</code>
/// A <code>URL</code> object that contains the local file path of the video to allow manual exporting or preview of the video.
///
- (void)stop:(void (^ _Nullable)(NSURL * _Nonnull))finished;
/// A method that cancels ⏹ recording a video 📹.
/// \param finished A block that will be called when the specified <code>duration</code> has ended.
///
- (void)cancel;
/// A method that exports a video 📹 file path to the Photo Library 📲💾.
/// \param path A <code>URL</code> object that can be set to a local video file path to export to the Photo Library.
///
/// \param finished A block that will be called when the export process is complete.
/// The block returns the following parameters:
/// <code>exported</code>
/// A boolean that returns <code>true</code> when a video is successfully exported to the Photo Library. Otherwise, it returns <code>false</code>.
/// <code>permissionStatus</code>
/// A <code>PHAuthorizationStatus</code> object that returns the current application’s status for exporting media to the Photo Library.
///
- (void)exportWithVideo:(NSURL * _Nonnull)path :(void (^ _Nullable)(PHAsset * _Nullable, NSURL * _Nullable, BOOL, PHAuthorizationStatus))finished;
/// A method that requsts microphone 🎙 permission manually, if micPermission is set to <code>manual</code>.
/// The block returns the following parameter:
/// <code>status</code>
/// A boolean that returns <code>true</code> when a the Microphone access is permitted. Otherwise, it returns <code>false</code>.
/// \param finished A block that will be called when the audio permission is requested.
///
- (void)requestMicrophonePermission:(void (^ _Nullable)(BOOL))finished;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ARConfiguration;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface ARRecorder (SWIFT_EXTENSION(LensCustomerSDK))
/// A method that prepares the video recorder with <code>ARConfiguration</code> 📝.
/// Recommended to use in the <code>UIViewController</code>’s method <code>func viewWillAppear(_ animated: Bool)</code>
/// \param configuration An object that defines motion and scene tracking behaviors for the session.
///
- (void)prepare:(ARConfiguration * _Nullable)configuration;
@end


@class NSCoder;

SWIFT_CLASS("_TtC15LensCustomerSDK12ARRenderView")
@interface ARRenderView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)resumeARSCNViewSessionWithIsSessionStart:(BOOL)isSessionStart callWithDelay:(BOOL)callWithDelay;
- (void)pauseARSCNViewSession;
- (void)pauseARSCNViewSessionForBackgroundTransition:(BOOL)forBackgroundTransition;
- (BOOL)isARSCNViewSessionPaused SWIFT_WARN_UNUSED_RESULT;
- (void)pauseARSCNViewSessionInHDWithSessionPauseCallback:(void (^ _Nonnull)(void))callback;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end




@class ARSession;
@class ARCamera;
@protocol SCNSceneRenderer;
@class SCNNode;
@class ARAnchor;
@class ARFrame;

@interface ARRenderView (SWIFT_EXTENSION(LensCustomerSDK)) <ARSCNViewDelegate, ARSessionDelegate>
- (void)sessionWasInterrupted:(ARSession * _Nonnull)session;
- (void)sessionInterruptionEnded:(ARSession * _Nonnull)session;
- (void)session:(ARSession * _Nonnull)session cameraDidChangeTrackingState:(ARCamera * _Nonnull)camera;
- (void)session:(ARSession * _Nonnull)session didFailWithError:(NSError * _Nonnull)error;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didAddNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didUpdateNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)session:(ARSession * _Nonnull)session didUpdateFrame:(ARFrame * _Nonnull)frame;
@end





/// Allows specifying the final video orientation.
typedef SWIFT_ENUM(NSInteger, ARVideoOrientation, open) {
/// The framework automatically sets the video orientation based on the active <code>ARInputViewOrientation</code> orientations.
  ARVideoOrientationAuto = 0,
/// Sets the video orientation to always portrait.
  ARVideoOrientationAlwaysPortrait = 1,
/// Sets the video orientation to always landscape.
  ARVideoOrientationAlwaysLandscape = 2,
};

@class UITouch;
@class UIEvent;

/// Lottie comes prepacked with a two Animated Controls, <code>AnimatedSwitch</code> and
/// <code>AnimatedButton</code>. Both of these controls are built on top of <code>AnimatedControl</code>
/// <code>AnimatedControl</code> is a subclass of <code>UIControl</code> that provides an interactive
/// mechanism for controlling the visual state of an animation in response to
/// user actions.
/// The <code>AnimatedControl</code> will show and hide layers depending on the current
/// <code>UIControl.State</code> of the control.
/// Users of <code>AnimationControl</code> can set a Layer Name for each <code>UIControl.State</code>.
/// When the state is change the <code>AnimationControl</code> will change the visibility
/// of its layers.
/// NOTE: Do not initialize directly. This is intended to be subclassed.
SWIFT_CLASS("_TtC15LensCustomerSDK15AnimatedControl")
@interface AnimatedControl : UIControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// An interactive button that plays an animation when pressed.
SWIFT_CLASS("_TtC15LensCustomerSDK14AnimatedButton")
@interface AnimatedButton : AnimatedControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
@end



/// An interactive switch with an ‘On’ and ‘Off’ state. When the user taps on the
/// switch the state is toggled and the appropriate animation is played.
/// Both the ‘On’ and ‘Off’ have an animation play range associated with their state.
/// Also available as a SwiftUI view (<code>LottieSwitch</code>).
SWIFT_CLASS("_TtC15LensCustomerSDK14AnimatedSwitch")
@interface AnimatedSwitch : AnimatedControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
@end


/// A view that can be added to a keypath of an AnimationView
SWIFT_CLASS("_TtC15LensCustomerSDK16AnimationSubview")
@interface AnimationSubview : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15LensCustomerSDK19AudioSessionHandler")
@interface AudioSessionHandler : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RTCAudioSession;
@class AVAudioSessionRouteDescription;

@interface AudioSessionHandler (SWIFT_EXTENSION(LensCustomerSDK)) <RTCAudioSessionDelegate>
- (void)audioSessionDidChangeRoute:(RTCAudioSession * _Nonnull)session reason:(AVAudioSessionRouteChangeReason)reason previousRoute:(AVAudioSessionRouteDescription * _Nonnull)previousRoute;
@end

@class NSString;

SWIFT_CLASS("_TtC15LensCustomerSDK10BaseParser")
@interface BaseParser : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


























SWIFT_CLASS("_TtC15LensCustomerSDK4Chat")
@interface Chat : BaseParser
@end

@class NSBundle;

SWIFT_CLASS("_TtC15LensCustomerSDK21ChatletViewController")
@interface ChatletViewController : UIViewController <WKDownloadDelegate, WKNavigationDelegate, WKUIDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKUserContentController;
@class WKScriptMessage;

@interface ChatletViewController (SWIFT_EXTENSION(LensCustomerSDK)) <WKScriptMessageHandler>
/// Chat Response
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end


@class WKWebView;
@class WKWebViewConfiguration;
@class WKNavigationAction;
@class WKWindowFeatures;
@class WKDownload;
@class NSURLResponse;
@class NSData;

@interface ChatletViewController (SWIFT_EXTENSION(LensCustomerSDK))
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
/// Download started from here . Delegate set
- (void)webView:(WKWebView * _Nonnull)webView navigationAction:(WKNavigationAction * _Nonnull)navigationAction didBecomeDownload:(WKDownload * _Nonnull)download SWIFT_AVAILABILITY(ios,introduced=14.5);
/// Download file path creation
- (void)download:(WKDownload * _Nonnull)download decideDestinationUsingResponse:(NSURLResponse * _Nonnull)response suggestedFilename:(NSString * _Nonnull)suggestedFilename completionHandler:(void (^ _Nonnull)(NSURL * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=14.5);
/// Download finished
- (void)downloadDidFinish:(WKDownload * _Nonnull)download SWIFT_AVAILABILITY(ios,introduced=14.5);
/// Download did failed
- (void)download:(WKDownload * _Nonnull)download didFailWithError:(NSError * _Nonnull)error resumeData:(NSData * _Nullable)resumeData SWIFT_AVAILABILITY(ios,introduced=14.5);
@end

@class WKNavigation;
@class WKNavigationResponse;

@interface ChatletViewController (SWIFT_EXTENSION(LensCustomerSDK))
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
@end


/// An Objective-C compatible wrapper around Lottie’s Animation class.
/// Use in tandem with CompatibleAnimationView when using Lottie in Objective-C
SWIFT_CLASS("_TtC15LensCustomerSDK19CompatibleAnimation")
@interface CompatibleAnimation : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name subdirectory:(NSString * _Nullable)subdirectory bundle:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Objective-C compatible wrapper around Lottie’s AnimationKeypath
SWIFT_CLASS("_TtC15LensCustomerSDK26CompatibleAnimationKeypath")
@interface CompatibleAnimationKeypath : NSObject
/// Creates a keypath from a dot separated string. The string is separated by “.”
- (nonnull instancetype)initWithKeypath:(NSString * _Nonnull)keypath OBJC_DESIGNATED_INITIALIZER;
/// Creates a keypath from a list of strings.
- (nonnull instancetype)initWithKeys:(NSArray<NSString *> * _Nonnull)keys OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum CompatibleRenderingEngineOption : NSInteger;
@class CompatibleDictionaryTextProvider;
enum CompatibleBackgroundBehavior : NSInteger;
@class UIColor;

/// An Objective-C compatible wrapper around Lottie’s LottieAnimationView.
SWIFT_CLASS("_TtC15LensCustomerSDK23CompatibleAnimationView")
@interface CompatibleAnimationView : UIView
/// Initializes a compatible AnimationView with a given compatible animation. Defaults to using
/// the rendering engine specified in LottieConfiguration.shared.
- (nonnull instancetype)initWithCompatibleAnimation:(CompatibleAnimation * _Nonnull)compatibleAnimation;
/// Initializes a compatible AnimationView with a given compatible animation and rendering engine
/// configuration.
- (nonnull instancetype)initWithCompatibleAnimation:(CompatibleAnimation * _Nonnull)compatibleAnimation compatibleRenderingEngineOption:(enum CompatibleRenderingEngineOption)compatibleRenderingEngineOption OBJC_DESIGNATED_INITIALIZER;
/// Initializes a compatible AnimationView with the resources asynchronously loaded from a given
/// URL. Defaults to using the rendering engine specified in LottieConfiguration.shared.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Initializes a compatible AnimationView with the resources asynchronously loaded from a given
/// URL using the given rendering engine configuration.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url compatibleRenderingEngineOption:(enum CompatibleRenderingEngineOption)compatibleRenderingEngineOption OBJC_DESIGNATED_INITIALIZER;
/// Initializes a compatible AnimationView from a given Data object specifying the Lottie
/// animation. Defaults to using the rendering engine specified in LottieConfiguration.shared.
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/// Initializes a compatible AnimationView from a given Data object specifying the Lottie
/// animation using the given rendering engine configuration.
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data compatibleRenderingEngineOption:(enum CompatibleRenderingEngineOption)compatibleRenderingEngineOption OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, strong) CompatibleAnimation * _Nullable compatibleAnimation;
@property (nonatomic) CGFloat loopAnimationCount;
@property (nonatomic, strong) CompatibleDictionaryTextProvider * _Nullable compatibleDictionaryTextProvider;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL shouldRasterizeWhenIdle;
@property (nonatomic) CGFloat currentProgress;
@property (nonatomic, readonly) CGFloat duration;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic) CGFloat currentFrame;
@property (nonatomic, readonly) CGFloat realtimeAnimationFrame;
@property (nonatomic, readonly) CGFloat realtimeAnimationProgress;
@property (nonatomic) CGFloat animationSpeed;
@property (nonatomic) BOOL respectAnimationFrameRate;
@property (nonatomic, readonly) BOOL isAnimationPlaying;
@property (nonatomic) enum CompatibleBackgroundBehavior backgroundMode;
- (void)play;
- (void)playWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// Note: When calling this code from Objective-C, the method signature is
/// playFromProgress:toProgress:completion which drops the standard “With” naming convention.
- (void)playFromProgress:(CGFloat)fromProgress toProgress:(CGFloat)toProgress completion:(void (^ _Nullable)(BOOL))completion;
/// Note: When calling this code from Objective-C, the method signature is
/// playFromFrame:toFrame:completion which drops the standard “With” naming convention.
- (void)playFromFrame:(CGFloat)fromFrame toFrame:(CGFloat)toFrame completion:(void (^ _Nullable)(BOOL))completion;
/// Note: When calling this code from Objective-C, the method signature is
/// playFromMarker:toMarker:completion which drops the standard “With” naming convention.
- (void)playFromMarker:(NSString * _Nonnull)fromMarker toMarker:(NSString * _Nonnull)toMarker completion:(void (^ _Nullable)(BOOL))completion;
- (void)playWithMarker:(NSString * _Nonnull)marker completion:(void (^ _Nullable)(BOOL))completion;
- (void)stop;
- (void)pause;
- (void)reloadImages;
- (void)forceDisplayUpdate;
- (id _Nullable)getValueFor:(CompatibleAnimationKeypath * _Nonnull)keypath atFrame:(CGFloat)atFrame SWIFT_WARN_UNUSED_RESULT;
- (void)logHierarchyKeypaths;
- (void)setColorValue:(UIColor * _Nonnull)color forKeypath:(CompatibleAnimationKeypath * _Nonnull)keypath;
- (UIColor * _Nullable)getColorValueFor:(CompatibleAnimationKeypath * _Nonnull)keypath atFrame:(CGFloat)atFrame SWIFT_WARN_UNUSED_RESULT;
- (void)addSubview:(AnimationSubview * _Nonnull)subview forLayerAt:(CompatibleAnimationKeypath * _Nonnull)keypath;
- (CGRect)convertWithRect:(CGRect)rect toLayerAt:(CompatibleAnimationKeypath * _Nullable)keypath SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)convertWithPoint:(CGPoint)point toLayerAt:(CompatibleAnimationKeypath * _Nullable)keypath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)progressTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)frameTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)durationFrameTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
@end

/// An Objective-C compatible version of <code>LottieBackgroundBehavior</code>.
typedef SWIFT_ENUM(NSInteger, CompatibleBackgroundBehavior, open) {
/// Stop the animation and reset it to the beginning of its current play time. The completion block is called.
  CompatibleBackgroundBehaviorStop = 0,
/// Pause the animation in its current state. The completion block is called.
  CompatibleBackgroundBehaviorPause = 1,
/// Pause the animation and restart it when the application moves to the foreground.
/// The completion block is stored and called when the animation completes.
/// <ul>
///   <li>
///     This is the default when using the Main Thread rendering engine.
///   </li>
/// </ul>
  CompatibleBackgroundBehaviorPauseAndRestore = 2,
/// Stops the animation and sets it to the end of its current play time. The completion block is called.
  CompatibleBackgroundBehaviorForceFinish = 3,
/// The animation continues playing in the background.
/// <ul>
///   <li>
///     This is the default when using the Core Animation rendering engine.
///     Playing an animation using the Core Animation engine doesn’t come with any CPU overhead,
///     so using <code>.continuePlaying</code> avoids the need to stop and then resume the animation
///     (which does come with some CPU overhead).
///   </li>
///   <li>
///     This mode should not be used with the Main Thread rendering engine.
///   </li>
/// </ul>
  CompatibleBackgroundBehaviorContinuePlaying = 4,
};


/// An Objective-C compatible wrapper around Lottie’s DictionaryTextProvider.
/// Use in tandem with CompatibleAnimationView to supply text to LottieAnimationView
/// when using Lottie in Objective-C.
SWIFT_CLASS("_TtC15LensCustomerSDK32CompatibleDictionaryTextProvider")
@interface CompatibleDictionaryTextProvider : NSObject
- (nonnull instancetype)initWithValues:(NSDictionary<NSString *, NSString *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An Objective-C compatible wrapper around Lottie’s RenderingEngineOption enum. Pass in an option
/// to the CompatibleAnimationView initializers to configure the rendering engine for the view.
typedef SWIFT_ENUM(NSInteger, CompatibleRenderingEngineOption, open) {
/// Uses the rendering engine specified in LottieConfiguration.shared.
  CompatibleRenderingEngineOptionShared = 0,
/// Uses the library default rendering engine, coreAnimation.
  CompatibleRenderingEngineOptionDefaultEngine = 1,
/// Optimizes rendering performance by using the Core Animation rendering engine for animations it
/// can render while falling back to the main thread renderer for all other animations.
  CompatibleRenderingEngineOptionAutomatic = 2,
/// Only renders animations using the main thread rendering engine.
  CompatibleRenderingEngineOptionMainThread = 3,
/// Only renders animations using the Core Animation rendering engine. Those animations that use
/// features not yet supported on this renderer will not be rendered.
  CompatibleRenderingEngineOptionCoreAnimation = 4,
};






SWIFT_CLASS("_TtC15LensCustomerSDK17FlashSupportEvent")
@interface FlashSupportEvent : BaseParser
@end

@class NSStream;

SWIFT_CLASS("_TtC15LensCustomerSDK16FoundationStream")
@interface FoundationStream : NSObject <NSStreamDelegate>
/// Delegate for the stream methods. Processes incoming bytes
- (void)stream:(NSStream * _Nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15LensCustomerSDK15ImageScrollView")
@interface ImageScrollView : UIScrollView <UIScrollViewDelegate>
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)removeFromSuperview;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end


/// Flash Coordinator class is havinga all the flash actions and methods to activate the flash and turn-off flash.
/// Also having a properties to know the upstreamer flash support and flash status.
SWIFT_CLASS("_TtC15LensCustomerSDK20LensFlashCoordinator")
@interface LensFlashCoordinator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class for all annotations
SWIFT_CLASS_NAMED("Node")
@interface ARNode : SCNNode
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15LensCustomerSDK8LineNode")
@interface LineNode : ARNode
@end


/// A CALayer subclass for rendering Lottie animations.
/// <ul>
///   <li>
///     Also available as a SwiftUI view (<code>LottieView</code>) and a UIView subclass (<code>LottieAnimationView</code>)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15LensCustomerSDK20LottieAnimationLayer")
@interface LottieAnimationLayer : CALayer
/// Called by CoreAnimation to create a shadow copy of this layer
/// More details: https://developer.apple.com/documentation/quartzcore/calayer/1410842-init
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The base view for <code>LottieAnimationView</code> on iOS, tvOS, watchOS, and macCatalyst.
/// Enables the <code>LottieAnimationView</code> implementation to be shared across platforms.
SWIFT_CLASS("_TtC15LensCustomerSDK23LottieAnimationViewBase")
@interface LottieAnimationViewBase : UIView
@property (nonatomic) UIViewContentMode contentMode;
- (void)didMoveToWindow;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A UIView subclass for rendering Lottie animations.
/// <ul>
///   <li>
///     Also available as a SwiftUI view (<code>LottieView</code>) and a CALayer subclass (<code>LottieAnimationLayer</code>)
///   </li>
/// </ul>
IB_DESIGNABLE
SWIFT_CLASS("_TtC15LensCustomerSDK19LottieAnimationView")
@interface LottieAnimationView : LottieAnimationViewBase
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end



@class NSLayoutConstraint;
@class UILabel;
@class UIButton;

SWIFT_CLASS("_TtC15LensCustomerSDK17LottieMessageView")
@interface LottieMessageView : UIView
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified lottieContainer;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified lottieContainerHeight;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified lottieContainerWidth;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified messageLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified actionButton;
- (void)layoutSubviews;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC15LensCustomerSDK16NotificationView") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NotificationView : UIView
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified messageLabel;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15LensCustomerSDK11Participant")
@interface Participant : BaseParser
@end


SWIFT_CLASS("_TtC15LensCustomerSDK7Pointer")
@interface Pointer : ARNode
@end






/// The recorder protocol.
SWIFT_PROTOCOL("_TtP15LensCustomerSDK16RecordARDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.0)
@protocol RecordARDelegate
/// A protocol method that is triggered when a recorder ends recording.
/// \param path A <code>URL</code> object that returns the video file path.
///
/// \param noError A boolean that returns true when the recorder ends without errors. Otherwise, it returns false.
///
- (void)recorderWithDidEndRecording:(NSURL * _Nonnull)path with:(BOOL)noError;
/// A protocol method that is triggered when a recorder fails recording.
/// \param error An <code>Error</code> object that returns the error value.
///
/// \param status A string that returns the reason of the recorder failure in a string literal format.
///
- (void)recorderWithDidFailRecording:(NSError * _Nullable)error and:(NSString * _Nonnull)status;
@optional
/// A protocol method that is triggered when a recorder is cancelled.
/// \param status A string that returns the reason the of recorder cancelation in a string literal format.
///
- (void)recorderWithDidCancelRecording:(NSString * _Nonnull)status;
/// A protocol method that is triggered when a recorder is modified.
/// \param duration A double that returns the duration of current recording
///
- (void)recorderWithDidUpdateRecording:(NSTimeInterval)duration;
@required
/// A protocol method that is triggered when the application will resign active.
/// note:
/// Check <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622950-applicationwillresignactive">applicationWillResignActive(_:)</a> for more information.
/// \param status A <code>RecordARStatus</code> object that returns the AR recorder current status.
///
- (void)recorderWithWillEnterBackground:(enum RecordARStatus)status;
@end

/// Allows specifying when to request Microphone access.
typedef SWIFT_ENUM(NSInteger, RecordARMicrophonePermission, open) {
/// The framework automatically requests Microphone access when needed.
  RecordARMicrophonePermissionAuto = 0,
/// Allows manual permission request.
  RecordARMicrophonePermissionManual = 1,
};

/// An object that returns the current Microphone status.
typedef SWIFT_ENUM(NSInteger, RecordARMicrophoneStatus, open) {
  RecordARMicrophoneStatusUnknown = 0,
  RecordARMicrophoneStatusEnabled = 1,
  RecordARMicrophoneStatusDisabled = 2,
};

/// An object that returns the AR recorder current status.
typedef SWIFT_ENUM(NSInteger, RecordARStatus, open) {
/// The current status of the recorder is unknown.
  RecordARStatusUnknown = 0,
/// The current recorder is ready to record.
  RecordARStatusReadyToRecord = 1,
/// The current recorder is recording.
  RecordARStatusRecording = 2,
/// The current recorder is paused.
  RecordARStatusPaused = 3,
};


SWIFT_CLASS("_TtC15LensCustomerSDK22RemovePointerOperation")
@interface RemovePointerOperation : NSOperation
- (void)cancel;
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The renderer protocol.
SWIFT_PROTOCOL("_TtP15LensCustomerSDK16RenderARDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.0)
@protocol RenderARDelegate
/// A protocol method that is triggered when a frame renders the <code>ARSCNView</code> content with the device’s camera stream.
/// \param buffer A <code>CVPixelBuffer</code> object that returns the rendered buffer.
///
/// \param time A <code>CMTime</code> object that returns the time a buffer was rendered with.
///
/// \param rawBuffer A <code>CVPixelBuffer</code> object that returns the raw buffer.
///
- (void)frameWithDidRender:(CVPixelBufferRef _Nonnull)buffer with:(CMTime)time using:(CVPixelBufferRef _Nonnull)rawBuffer;
@end





@interface UIButton (SWIFT_EXTENSION(LensCustomerSDK))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull disabledTitle;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull disabledTitleColor;
@property (nonatomic) IBInspectable CGFloat paddingX;
@property (nonatomic) IBInspectable CGFloat paddingY;
@end




































@class UIPopoverPresentationController;

@interface UIViewController (SWIFT_EXTENSION(LensCustomerSDK)) <UIPopoverPresentationControllerDelegate>
- (void)popoverPresentationController:(UIPopoverPresentationController * _Nonnull)popoverPresentationController willRepositionPopoverToRect:(CGRect * _Nonnull)rect inView:(UIView * _Nonnull * _Nonnull)view;
- (void)prepareForPopoverPresentation:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
- (void)popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
@end


@interface UIViewController (SWIFT_EXTENSION(LensCustomerSDK))
- (void)openShareSheet:(NSArray * _Nonnull)data popFromView:(UIView * _Nonnull)view completionHandler:(void (^ _Nullable)(BOOL))completionBlock;
@end


/// A struct that identifies the application <code>UIViewController</code>s and their orientations.
SWIFT_CLASS("_TtC15LensCustomerSDK6ViewAR") SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface ViewAR : NSObject
/// A <code>UIInterfaceOrientationMask</code> object that returns the recommended orientations for a <code>UIViewController</code> with AR scenes.
/// Recommended to return in the application delegate method <code>func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIInterfaceOrientationMask orientation;)
+ (UIInterfaceOrientationMask)orientation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15LensCustomerSDK9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
